/* ======================================================= 
    Styles
========================================================== */

/* Import normalize */

* {
    box-sizing: border-box;
    /* Include padding and border in the element's total width and height */
}

body {
    background: #212121;
    color: #f5f5f5;
    font-family: sans-serif;
}

h1 {
    text-align: center; /* Fallback style for browsers without flexbox */
    line-height: 1.5;
    font-size: 4em;
}

/* .item {
    max-width: 100%;
} */

.item-img {
    width: 100px;
}

.item-right {
    width: calc(100% - 100px);
    /* .grid width = 40em --> main --> section --> .item-avatar + .item-right
    .item-right width is 40em (640px) --> .item-right p
    Need to define width to prevent text running till end of browser. */ 
    
    overflow: hidden; 
    /* The overflow CSS property specifies what to do when an 
    element's content is too large to fit in its block formatting context.
    Need `overflow: hidden` bc image (100px) + .item-right p (640px) = 740px.
    740px will overflow 640px container. 
    .item-right p = width: 100%. That means 640px bc 
    main = width: 40em -> .container -> .item -> .item-right-p. */
    
    padding-left: 2em; /* gap */
}

/* Ellipsis
width + wrapping + overflow + text-overflow
Source: https://davidwalsh.name/css-ellipsis */

.item-right p {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

footer {
    text-align: center;
    padding: 1em 0;
}

/* ======================================================= 
    Layout
========================================================== */

/* Responsive, mobile layout (single column) | fallback */

/* How to center w/out flexbox
"margin: 0 auto" + "width"
*/

.grid {
    max-width: 40em;
    margin: 0 auto;
}

main {
    max-width: inherit; /* 40em */
}

/* ------------------------------------------------------- */
/* Mobile layout for browsers with Flexbox support */

@supports (display: flex) {
    .item {
        display: flex;
        flex-direction: row; /* Items (icon and text) are side-by-side */
        justify-content: flex-start; /* Align items on main axis */
        align-items: center; /* Align items on cross-axis */
    }
}

/* Layouts for browsers with CSS Grid support */

@supports (grid-area: auto) {

    /* Mobile layout */

    @media screen and (min-width: 50em) { /* viewport >= 50em */
        .grid {
            display: grid;
            grid-template-columns: 1fr; /* Explicit grid track. Alternative: 40em */
            grid-auto-rows: auto; /* Implicit grid track. Specifies size of auto-generated grid tracks. 
            `auto` = default, size of content */
            grid-template-areas: /* Template + named grid areas are optional here */
                "head"
                "main"
                "foot";
        }
    
        header {
            grid-area: head;
        }
    
        main {
            grid-area: main;
        }
    
        footer {
            grid-area: foot;
        }
    }

    /* Two-column layout */

    @media screen and (min-width: 65em) {
        .grid {
            max-width: 80vw; /* Since main is `inherit`, its value is the same */
        }
        .main-grid {
            display: grid;
            grid-template-columns: 50% 50%;  
        }
    }

    /* Three-column layout */
    @media screen and (min-width: 78em) {
        .main-grid {
            grid-template-columns: repeat(3, 1fr);
            min-height: 0;
            min-width: 0;
        }
        .item {
            overflow: hidden;
            min-width: 0;
        }
    }
}